;; define eww command for below usage
(defvar eww "/usr/bin/eww -c ~/.config/eww")

;; calendar Widget
(defwidget cal []
    (box :class "calendar-box"
         :orientation "h"
        (box :class "calendar-inner-box"
            (calendar :class "calendar"
                :day calendar-day
                :month calendar-month
                :year calendar-year)
        )
    )
)
(defpoll calendar-day :interval "1h"
    "date '+%d'")
(defpoll calendar-month :interval "1h"
    "date '+%m'")
(defpoll calendar-year :interval "1h"
    "date '+%Y'")

;; Widgets on Right

(defpoll volume :interval "1s" "volumectl | awk -F ' ' '{print substr($2, 0, length($2)-1)}'")
(defpoll volume-status :interval "1s" "volumectl | awk -F ' ' '{print substr($3, 2, length($3)-2)}'")
(defvar volum "false")
(defwidget volum []
    (eventbox :onhover "${eww} update volum=true"
              :onhoverlost "${eww} update volum=false"
            (box :orientation "h"
                 :space-evenly "false"
                 :spacing "2"
                 (revealer :transition "slideright"
                           :reveal volum
                           :duration "550ms"
                            (scale :class "volbar"
                                :value volume
                                :tooltip "Volume: ${volume} %"
                                :onchange "volumectl set {}%"
                                :orientation "h"
                                :max 100
                                :min 0
                            )
                )
                (label :class "volume-icon" :text "${volume-status == "on" ? "墳" : "ﱝ"}")
            )
    )
)

(defpoll brightness :interval "5s" "light | awk -F, '{print substr($0, 0, length($0)-3)}'")
(defvar bright "false")
(defwidget bright []
    (eventbox
        :onhover "${eww} update bright=true"
        :onhoverlost "${eww} update bright=false"
        (box :space-evenly "false"
             :orientation "h"
             :hexpand "false"
             :spacing 2
            (revealer :transition "slideright"
                      :reveal bright
                      :duration "550ms"
                        (scale :class "brightbar"
                             :value brightness
                             :tooltip "Brightness: ${brightness} %"
                             :onchange "light -S {}"
                             :orientation "h"
                             :max 100
                             :min 0
                        )
            )
            (label :class "brightness-icon" :text "")
        )
    )
)

(defwidget battery []
    (box :orientation "h"
         :space-evenly "false"
        (label :class "battery"
               :valign "end"
               :text "${battery-status == "Charging" ? "" :
                    battery-capacity == 100 ? "" :
                    (battery-capacity > 90 ? "" :
                    (battery-capacity > 80 ? "" : 
                    (battery-capacity > 70 ? "" :
                    (battery-capacity > 60 ? "" :
                    (battery-capacity > 50 ? "" :
                    (battery-capacity > 40 ? "" :
                    (battery-capacity > 30 ? "" :
                    (battery-capacity > 20 ? "" :
                    (battery-capacity > 10 ? "" :
                    (battery-capacity > 0 ? "" : ""))))))))))}"
               :tooltip "Battery: ${battery-capacity}%")))

(defpoll battery-capacity :interval "1s" "cat /sys/class/power_supply/macsmc-battery/capacity")
(defpoll battery-status :interval "1s" "cat /sys/class/power_supply/macsmc-battery/status")

(defwidget control []
    (box :orientation "h"
         :space-evenly "false"
         :class "control"
         (volum)
         (bright)
         (battery)
))

(defvar calendar "false")
(defwidget time []
    (box :orientation "h"
         :class "time"
         :halign "end"
        (button :onclick "${calendar ?
                "${eww} update calendar=false && ${eww} close calendar" :
                "${eww} update calendar=true && ${eww} open calendar"}"
                date)))
(defpoll date :interval "1s" "env LANG=en.US date '+%a %d. %b  %H:%M'")

(defwidget power []
    (eventbox :onhover "${eww} update power=true"
              :onhoverlost "${eww} update power=false"
            (box :orientation "h"
                :space-evenly "false"
                :hexpand "false"
                :class "powermenu"
                (revealer :transition "slideright"
                          :reveal power
                          :duration "550ms"
                    (box :orientation "h"
                         :space-evenly "false"
                        (button :class "button-lock"
                                :tooltip "Lock"
                                :onclick "${lock}"
                                "")
                        (button :class "button-reboot"
                                :tooltip "Reboot"
                                :onclick "reboot" "")
                    )
                )
                (button :class "button-off"
                    :tooltip "Shutdown"
                    :onclick "shutdown now" "⏻")
            )
    )
)
(defvar power false)
(defvar lock "swaylock --indicator-idle-visible --indicator-radius 100 --indicator-thickness 7 --ignore-empty-password --ring-color 53E2AE --ring-ver-color 53E2AE --ring-wrong-color EE4F84 --key-hl-color EE4F84 --text-color ffffff --text-ver-color ffffff --text-wrong-color EE4F84 --line-color 00000000 --inside-color 00000088 --inside-ver-color 00000088 --inside-wrong-color 00000088 --separator-color 00000000 & systemctl suspend")

(defwidget stats []
    (box :orientation "h"
         :space-evenly "false"
         (time)
         (power)))

;; Right Widgets
(defwidget right []
    (box :orientation "h"
         :space-evenly "false"
         :halign "end"
         :spacing 5
         (control)
         (stats))
)

;; Widgets on Left
(deflisten workspaces :initial "[]" "sh ~/.config/eww/scripts/get-workspaces.sh")
(deflisten current_workspace :initial "1" "sh ~/.config/eww/scripts/get-active-workspace.sh")

(defwidget workspaces []
    (eventbox :onscroll "sh ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}"
        (box :class "workspaces"
            :space-evenly true
            :orientation "h"
            :valign "center"
            :halign "start"
            (for workspace in workspaces
            (button :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :visible "${workspace.windows > 0 || workspace.id == current_workspace}"
                    :class "${workspace.id == current_workspace ? "current" : ""} workspace-entry"
                    "${workspace.id}")
            )
        )
    )
)

(defwidget logo []
    (box :orientation "h"
         :class "logo"
         :space-evenly "false"
         :halign "start"
         ""))

;; Left Widgets
(defwidget left []
    (box :orientation "h"
         :space-evenly "false"
         :halign "start"
(logo)
(workspaces)))

;; Bar Widgets
(defwidget bar []
    (box :class "bar"
            :orientation "h"
            :vexpand "false"
            :hexpand "false"
    (left)
    (right)))

;; Bar Windows
(defwindow bar
    :monitor 0
    :geometry (geometry :x "0"
                        :y "6"
                        :width "97.5%"
                        :height "47px"
                        :anchor "top center")
    :stacking "fg"
    ; :reserve (struts :distance "50px" :side "top")
    :wm-ignore false
    :hexpand "false"
    :vexpand "false"
(bar))

;; calendar Windows
(defwindow calendar
    :monitor 0
    :geometry (geometry :x "80%"
                        :y "70px"
                        :width "60px"
                        :height "270px")
(cal))
