# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
alt - h : yabai -m window --focus west
alt - l : yabai -m window --focus east
alt - k : yabai -m window --focus north
alt - j : yabai -m window --focus south

# swap managed window
shift + alt - h : yabai -m window --swap west
shift + alt - l : yabai -m window --swap east
shift + alt - k : yabai -m window --swap north
shift + alt - j : yabai -m window --swap south

# move managed window
shift + cmd - h : yabai -m window --warp east

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + cmd - n : yabai -m space --create && \
                  index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  yabai -m window --space "${index}" && \
                  yabai -m space --focus "${index}"; sketchybar --trigger windows_on_spaces
shift + alt - 1 : yabai -m window --space "1" && yabai -m space --focus "1"; sketchybar --trigger windows_on_spaces
shift + alt - 2 : yabai -m window --space "2" && yabai -m space --focus "2"; sketchybar --trigger windows_on_spaces
shift + alt - 3 : yabai -m window --space "3" && yabai -m space --focus "3"; sketchybar --trigger windows_on_spaces
shift + alt - 4 : yabai -m window --space "4" && yabai -m space --focus "4"; sketchybar --trigger windows_on_spaces
shift + alt - 5 : yabai -m window --space "5" && yabai -m space --focus "5"; sketchybar --trigger windows_on_spaces
shift + alt - 6 : yabai -m window --space "6" && yabai -m space --focus "6"; sketchybar --trigger windows_on_spaces
shift + alt - 7 : yabai -m window --space "7" && yabai -m space --focus "7"; sketchybar --trigger windows_on_spaces
shift + alt - 8 : yabai -m window --space "8" && yabai -m space --focus "8"; sketchybar --trigger windows_on_spaces
shift + alt - 9 : yabai -m window --space "9" && yabai -m space --focus "9"; sketchybar --trigger windows_on_spaces
shift + alt - 0 : yabai -m window --space "0" && yabai -m space --focus "0"; sketchybar --trigger windows_on_spaces

alt - 1 : yabai -m space --focus "1"; sketchybar --trigger windows_on_spaces
alt - 2 : yabai -m space --focus "2"; sketchybar --trigger windows_on_spaces
alt - 3 : yabai -m space --focus "3"; sketchybar --trigger windows_on_spaces
alt - 4 : yabai -m space --focus "4"; sketchybar --trigger windows_on_spaces
alt - 5 : yabai -m space --focus "5"; sketchybar --trigger windows_on_spaces
alt - 6 : yabai -m space --focus "6"; sketchybar --trigger windows_on_spaces
alt - 7 : yabai -m space --focus "7"; sketchybar --trigger windows_on_spaces
alt - 8 : yabai -m space --focus "8"; sketchybar --trigger windows_on_spaces
alt - 9 : yabai -m space --focus "9"; sketchybar --trigger windows_on_spaces
alt - 0 : yabai -m space --focus "0"; sketchybar --trigger windows_on_spaces

# focus monitor
ctrl + alt - h : yabai -m display --focus prev
ctrl + alt - l : yabai -m display --focus next

# send window to monitor and follow focus
ctrl + cmd - h  : yabai -m window --display prev; yabai -m display --focus prev
ctrl + cmd - l  : yabai -m window --display next; yabai -m display --focus next

# move floating window
shift + ctrl - a : yabai -m window --move rel:-20:0
shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
shift + alt - a : yabai -m window --resize left:-20:0
shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
shift + cmd - s : yabai -m window --resize bottom:0:-20
shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
alt - d : yabai -m window --toggle zoom-parent; sketchybar --trigger window_focus
alt - f : yabai -m window --toggle zoom-fullscreen; sketchybar --trigger window_focus

# toggle window split type
alt - e : yabai -m window --toggle split; sketchybar --trigger windows_on_spaces

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
         yabai -m window --grid 4:4:1:1:2:2;\
         sketchybar --trigger window_focus

# toggle sticky(+float), topmost, picture-in-picture
alt - p : yabai -m window --toggle sticky;\
          yabai -m window --toggle topmost;\
          yabai -m window --toggle pip
# close window
alt - q : yabai -m window --close; sketchybar --trigger windows_on_spaces
# screenshot
shift + cmd - a : /usr/local/bin/flameshot gui
alt - return : open -na /Applications/WezTerm.app; sketchybar --trigger windows_on_spaces
